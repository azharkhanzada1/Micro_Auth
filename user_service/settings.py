"""
Django settings for user_service project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta
import redis

# Base directory for the project
BASE_DIR = Path(__file__).resolve().parent.parent

# Secret key for the application (keep this secret in production!)
SECRET_KEY = 'django-insecure-mp@kp8do2+bp!os8ml(40(&(1swq%$9!xuy^nzvzqg#qv5k3i7'

# Debug mode (set to False in production)
DEBUG = True

# Allowed hosts for the application
ALLOWED_HOSTS = []  # Specify your allowed hosts here

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework_simplejwt',
    'drf_spectacular',
    'rest_framework',
    'authorization',  # Custom authorization app
    'api_gateway',    # Custom API gateway app
    'users',          # Custom users app
    'django.contrib.sites',  # Required for allauth
    'allauth',  # Django Allauth for authentication
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',  # Google provider
    'allauth.socialaccount.providers.github',  # GitHub provider
    'dj_rest_auth',  # REST API for authentication
    'rest_framework.authtoken',  # Token authentication
]

# Middleware configuration
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'users.middleware.TokenCachingMiddleware',  # Custom middleware for token caching
    'allauth.account.middleware.AccountMiddleware',  # Middleware for allauth
    # 'user_service.users.middleware.TokenCachingMiddleware',
]

# URL configuration
ROOT_URLCONF = 'user_service.urls'

# Templates configuration
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],  # Directory for templates (add paths as needed)
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI application
WSGI_APPLICATION = 'user_service.wsgi.application'

# Database configuration
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',  # Using SQLite for simplicity
        'NAME': BASE_DIR / 'db.sqlite3',  # Database file location
    }
}

# Password validation settings
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization settings
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # JWT Authentication
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# Simple JWT settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),  # Token expiration time
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),  # Refresh token expiration time
}

# Redis settings
REDIS_HOST = 'localhost'  # Redis server host
REDIS_PORT = 6379  # Redis server port
REDIS_DB = 0  # Redis database number

# Redis client initialization
redis_client = redis.StrictRedis(
    host=REDIS_HOST,
    port=REDIS_PORT,
    db=REDIS_DB,
    decode_responses=True  # Responses will be decoded
)

# Caching settings using Redis
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',  # Using Django Redis cache
        'LOCATION': f'redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}',  # Redis server location
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',  # Client class for Redis
        }
    }
}

# Site ID for Django Allauth
SITE_ID = 1

# Authentication backends
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',  # Allauth backend for account management
)

# Allauth settings
ACCOUNT_EMAIL_VERIFICATION = 'optional'  # Email verification settings
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'  # Allow authentication using username or email
ACCOUNT_EMAIL_REQUIRED = True  # Email is required for registration
ACCOUNT_USERNAME_REQUIRED = False  # Username is not required

# Specify the REST Auth URL
REST_USE_JWT = True  # Use JWT for REST authentication

# Social account auto signup setting
SOCIALACCOUNT_AUTO_SIGNUP = True  # Automatically sign up users with social accounts

# Social account providers configuration
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    },
    'github': {
        'SCOPE': [
            'user:email',
        ],
    }
}

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'api_gateway_errors.log'),  # Error log file location
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'ERROR',  # Log errors to file
            'propagate': True,
        },
    },
}
